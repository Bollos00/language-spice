

name: 'SPICE'
scopeName: 'source.spice'
fileTypes: [
	'cir'
	'lib'
	'sp'
	'spice'
]
firstLineMatch: ''

# Important notes:
# (?mi):
#		(?...) - Signalize the mode of the regular expression
#		m - Multiple line (one line treated at time) that way
#		 the string begin on the beginning of the line
#		i - Insensitive Case
#	(?:...) - non-capturing groups

# foldingStartMarker: '(?mi)^(\\.subckt|\\.macro).*'
# foldingStopMarker: '(?mi)^(\\.ends|\\.endm)'

patterns: [
	#
	# Title and comments
	#
	{ # Comments
		match: '(?m)(?:^\\*|\\$|\\;).*$'
		name: 'comment.line.spice'
	}
	{ # First line for the title
		match: '^(\\A.*)'
		name: 'markup.bold.title.spice'
	}
	#
	# Numbers
	#
	{ # Numbers on SPICE
		match: '(?mi)\\b(([0-9]+\.[0-9]+|\\.[0-9]+|[0-9]+)(t|g|meg|k|m|mil|u|n|p|f|e[\\+\\-0-9][0-9]+|))\\b'
		name: 'constant.numeric.spice'
	}
	#
	# SPICE elements
	#
	{ # SPICE elements with two nodes
		match: '(?mi)(^(?:B|C|D|I|L|R|V)[a-z0-9_]+)(\\s+[a-z0-9_]+\\s+[a-z0-9_]+)'
		name: 'variable.other.element2.spice'
		captures:
			1:
				name: 'variable.language.spice'
			2:
				name: 'variable.other.node.spice'
	}
	{ # SPICE elements with three nodes
		match: '(?mi)(^(?:J|Q|U|Z)[a-z0-9_]+)(\\s+[a-z0-9_]+\\s+[a-z0-9_]+\\s+[a-z0-9_]+)'
		name: 'variable.other.element3.spice'
		captures:
			1:
				name: 'variable.language.spice'
			2:
				name: 'variable.other.node.spice'
	}
	{ # SPICE elements with four nodes
	  # Note: MOSFETs can have two or three nodes, depending on the model
		match: '(?mi)(^(?:E|F|G|H|M|O|S|T|S|Y)[a-z0-9_]+)(\\s+[a-z0-9_]+\\s+[a-z0-9_]+\\s+[a-z0-9_]+\\s+[a-z0-9_]+)'
		name: 'variable.other.element4.spice'
		captures:
			1:
				name: 'variable.language.spice'
			2:
				name: 'variable.other.node.spice'
	}
	{ # Subcircuit declaration
		match: '(?mi)(^X[a-z0-9_]+)((?:[ \\t]+[a-z0-9_]+)+)([ \\t]+[a-z0-9_]+)'
		captures:
			1:
				name: 'variable.language.spice'
			2:
				name: 'variable.other.node.spice'
			3:
				name: 'variable.parameter.spice'
	}
	#
	# Dot (.) Commands declaration
	#
	{ # Subcircuit
		match: '(?mi)(^\\.subckt)(\\s[a-z0-9_]+\\s)(.*$)'
		name: 'entity.other.subckt.spice'
		captures:
			1:
				name: 'entity.name.section.spice'
			2:
				name: 'variable.parameter.spice'
			3:
				name: 'variable.other.node.spice'
	}
	{ # macro
		match: '(?mi)(^\\.macro)(\\s[a-z0-9_]+\\s)(.*$)'
		name: 'entity.other.subckt.spice'
		captures:
			1:
				name: 'entity.name.section.spice'
			2:
				name: 'variable.parameter.spice'
			3:
				name: 'variable.other.node.spice'
	}
	{ # model
		match:  '(?mi)^(\\.model)(\\s+[a-z0-9_]+)(\\s+(?:R|C|L|SW|CSW|URC|LTRA|D|NPN|PNP|NJF|PJF|NMOS|PMOS|NMF|PMF|VDMOS))'
		captures:
			1:
				name: 'entity.name.section.spice'
			2:
				name: 'variable.parameter.spice'
			3:
				name: 'entity.name.spice'
	}
	{ # global
		match: '(?mi)^(\\.global)((?:[ \\t]+[a-z0-9_]+)+)'
		captures:
			1:
				name: 'entity.name.section.spice'
			2:
				name: 'variable.other.node.spice'
	}
	{ # include
		match: '(?mi)^(\\.include)[ \\t]+(.*)'
		captures:
			1:
				name: 'entity.name.section.spice'
			2:
				name: 'string.unquoted.spice'
	}
	{ # lib
		match: '(?mi)^(\\.lib)[ \\t]+(.+)([ \\t]+[a-z0-9_]+)'
		captures:
			1:
				name: 'entity.name.section.spice'
			2:
				name: 'string.unquoted.spice'
			3:
				name: 'variable.parameter.spice'
	}
	# TODO: .DC .OP .AC ...
	# TODO: .PARAM
	# TODO: .FUNC
	# TODO: .CSPARAM
	# TODO: .IF .ELSEIF .ELSE .ENDIF
	{ # Other dot commands
		match:
			'(?mi)^(?:\\.control|\\.cspara|\\.end|\\.endc|\\.endif|\\.endm|\\.ends|\\.four|' +
			'\\.func|\\.meas|\\.measure|\\.options|\\.param|\\.plot|\\.print|\\.probe|\\.temp|' +
			'\\.save|\\.with|\\.op|\\.ac|\\.dc|\\.tran)\\b'
		name: 'entity.name.section.spice'
	}
	#
	# Symbolic keywords
	#
	{
		match: '(?mi)(?:\\+|\\-|\\=|\\(|\\)|\\{|\\}|\\,)'
		name: 'keyword.operator.spice'
	}
	#
	# SPICE keywords
	#
	{
		match: '(?i)(?:\\b(?:tran|ac|dc)\\b)'
		name: 'keyword.control.spice'
	}
	#
	# SPICE functions
	#
	{ # let
		# match: '(?mi)^(let)\\s+([a-z0-9_]+)\\s+(\=)\\s+(?:.*)'
		match: '(?mi)^(let)\\s+([a-z0-9_]+)\\s+(\=)'
		captures:
			1:
				name: 'entity.name.function.spice'
			2:
				name: 'variable.parameter.spice'
			3:
				name: 'keyword.operator.spice'
			# 4:
			# 	name: ''
	}
	{ # Other SPICE functions
		match:
			'(?i)\\b(?:run|sqrt|sin|cos|tan|sinh|cosh|tanh|asin|acos|atan|' +
			'asinh|acosh|atanh|arctan|exp|ln|log|abs|nint|int|floor|ceil|pow|' +
			'pwr|min|max|sgn)\\b'
		name: 'entity.name.function.spice'
	}
	#
	# Interactive ngspice Interpreter functions
	#
	{
		
	}
	#
	# SPICE strings
	#
	{
		match: '(?mi)(?:\\\'(.+)\\\')'
		name: 'string.quoted.single.spice'
	}
	{
		match: '(?mi)(?:\\\"(.+)\\\")'
		name: 'string.quoted.double.spice'
	}

]
